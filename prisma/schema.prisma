// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String             @id
  about          String?            @default("")
  created        DateTime           @default(now())
  karma          Int                @default(1)
  submitted      Int[]
  email          String?
  passwordSalt   String
  hashedPassword String
  sessions       UserSession[]
  items          Item[]
  upvotedItems   UpvotesOnItems[]
  favoriteItems  FavoritesOnItems[]
}

model UserSession {
  id      Int      @id @default(autoincrement())
  userId  String
  user    User     @relation(fields: [userId], references: [id])
  expired DateTime @default(now())
  token   String
}

model Item {
  id             Int                @id @default(autoincrement())
  deleted        Boolean            @default(false)
  type           String
  userId         String
  user           User               @relation(fields: [userId], references: [id])
  created        DateTime           @default(now())
  text           String?            @db.Text // 65535bytes
  dead           Boolean            @default(false)
  parentId       Int?
  parent         Item?              @relation("ParentKids", fields: [parentId], references: [id])
  kids           Item[]             @relation("ParentKids")
  ancestorId     Int?
  ancestor       Item?              @relation("AncestorDescendants", fields: [ancestorId], references: [id])
  descendants    Item[]             @relation("AncestorDescendants")
  url            String?
  title          String?
  upvotedUsers   UpvotesOnItems[]
  favoritedUsers FavoritesOnItems[]
}

model UpvotesOnItems {
  item    Item     @relation(fields: [itemId], references: [id])
  itemId  Int
  user    User     @relation(fields: [userId], references: [id])
  userId  String
  created DateTime @default(now())

  @@id([itemId, userId])
}

model FavoritesOnItems {
  item    Item     @relation(fields: [itemId], references: [id])
  itemId  Int
  user    User     @relation(fields: [userId], references: [id])
  userId  String
  created DateTime @default(now())

  @@id([itemId, userId])
}
